diff --color -Nur icu.orig/source/common/umutex.cpp icu/source/common/umutex.cpp
--- icu.orig/source/common/umutex.cpp	2023-12-11 23:27:41.000000000 +0100
+++ icu/source/common/umutex.cpp	2024-06-07 15:05:24.928001030 +0200
@@ -44,20 +44,29 @@
  *************************************************************************************************/
 
 namespace {
+#ifdef __wii__
+mutex_t initMutex;
+#else
 std::mutex *initMutex;
 std::condition_variable *initCondition;
+#endif
 
 // The ICU global mutex.
 // Used when ICU implementation code passes nullptr for the mutex pointer.
 UMutex globalMutex;
 
+#ifndef __wii__
 std::once_flag initFlag;
 std::once_flag *pInitFlag = &initFlag;
+#endif
 
 }  // Anonymous namespace
 
 U_CDECL_BEGIN
 static UBool U_CALLCONV umtx_cleanup() {
+#ifdef __wii__
+    LWP_MutexDestroy(initMutex);
+#else
     initMutex->~mutex();
     initCondition->~condition_variable();
     UMutex::cleanup();
@@ -66,17 +75,23 @@
     // Do not use this trick anywhere else in ICU; use umtx_initOnce, not std::call_once().
     pInitFlag->~once_flag();
     pInitFlag = new(&initFlag) std::once_flag();
+#endif
     return true;
 }
 
 static void U_CALLCONV umtx_init() {
+#ifdef __wii__
+    LWP_MutexInit(&initMutex, 0);
+#else
     initMutex = STATIC_NEW(std::mutex);
     initCondition = STATIC_NEW(std::condition_variable);
     ucln_common_registerCleanup(UCLN_COMMON_MUTEX, umtx_cleanup);
+#endif
 }
 U_CDECL_END
 
 
+#ifndef __wii__
 std::mutex *UMutex::getMutex() {
     std::mutex *retPtr = fMutex.load(std::memory_order_acquire);
     if (retPtr == nullptr) {
@@ -106,6 +121,7 @@
     }
     gListHead = nullptr;
 }
+#endif
 
 
 U_CAPI void  U_EXPORT2
@@ -143,8 +159,12 @@
 //
 U_COMMON_API UBool U_EXPORT2
 umtx_initImplPreInit(UInitOnce &uio) {
+#ifdef __wii__
+    LWP_MutexLock(initMutex);
+#else
     std::call_once(*pInitFlag, umtx_init);
     std::unique_lock<std::mutex> lock(*initMutex);
+#endif
     if (umtx_loadAcquire(uio.fState) == 0) {
         umtx_storeRelease(uio.fState, 1);
         return true;      // Caller will next call the init function.
@@ -152,7 +172,9 @@
         while (umtx_loadAcquire(uio.fState) == 1) {
             // Another thread is currently running the initialization.
             // Wait until it completes.
+#ifndef __wii__
             initCondition->wait(lock);
+#endif
         }
         U_ASSERT(uio.fState == 2);
         return false;
@@ -168,11 +190,16 @@
 
 U_COMMON_API void U_EXPORT2
 umtx_initImplPostInit(UInitOnce &uio) {
+#ifdef __wii__
+    umtx_storeRelease(uio.fState, 2);
+    LWP_MutexUnlock(initMutex);
+#else
     {
         std::unique_lock<std::mutex> lock(*initMutex);
         umtx_storeRelease(uio.fState, 2);
     }
     initCondition->notify_all();
+#endif
 }
 
 U_NAMESPACE_END
diff --color -Nur icu.orig/source/common/umutex.h icu/source/common/umutex.h
--- icu.orig/source/common/umutex.h	2023-12-11 23:27:41.000000000 +0100
+++ icu/source/common/umutex.h	2024-06-07 15:11:45.936084300 +0200
@@ -25,6 +25,10 @@
 #include <mutex>
 #include <type_traits>
 
+#ifdef __wii__
+    #include <gccore.h>
+#endif
+
 #include "unicode/utypes.h"
 #include "unicode/uclean.h"
 #include "unicode/uobject.h"
@@ -218,8 +222,13 @@
 
 class U_COMMON_API UMutex {
 public:
+#ifdef __wii__
+    UMUTEX_CONSTEXPR UMutex() { LWP_MutexInit(&mutex, 0); }
+    ~UMutex() { LWP_MutexDestroy(mutex); }
+#else
     UMUTEX_CONSTEXPR UMutex() {}
     ~UMutex() = default;
+#endif
 
     UMutex(const UMutex &other) = delete;
     UMutex &operator =(const UMutex &other) = delete;
@@ -227,10 +236,20 @@
 
     // requirements for C++ BasicLockable, allows UMutex to work with std::lock_guard
     void lock() {
+#ifdef __wii__
+        LWP_MutexLock(mutex);
+#else
         std::mutex *m = fMutex.load(std::memory_order_acquire);
         if (m == nullptr) { m = getMutex(); }
         m->lock();
+#endif
     }
+#ifdef __wii__
+    void unlock() { LWP_MutexUnlock(mutex); }
+
+private:
+    mutex_t mutex;
+#else
     void unlock() { fMutex.load(std::memory_order_relaxed)->unlock(); }
 
     static void cleanup();
@@ -250,6 +269,7 @@
      * be nullptr.
      */
     std::mutex *getMutex();
+#endif
 };
 
 
